#!/bin/bash

### Install PR ###
#
# This script takes a Github pull request number as an argument, downloads the
# docker images from the pull request's artifacts, pushes them, and installs
# them on your Kubernetes cluster.  Requires a Github personal access token
# in the $GITHUB_TOKEN environment variable.

set -eo pipefail

# Read script flags and arguments
while :
do
  case $1 in
    -h|--help)
      echo "Install Linkerd with the changes made in a GitHub Pull Request."
      echo ""
      echo "Note:"
      echo "    If installing into an existing Kubernetes cluster, this script"
      echo "    assumes the cluster is not a KinD cluster."
      echo ""
      echo "Usage:"
      echo "    # Install Linkerd into the 'kubectl' current cluster"
      echo "    bin/install-pr ####"
      echo ""
      echo "    # Install Linkerd into a new KinD cluster"
      echo "    bin/install-pr [-k|--kind] ####"
      exit 0
      ;;
    -k|--kind)
      is_kind=1
      ;;
    -?*)
      echo "Error: Unknown option: $1" >&2
      exit 1
      ;;
    *)
      break
  esac
  shift
done

pr=$1

if [ -z "$pr" ]
then
  echo "Usage: ${0##*/} (PR number)" >&2
  exit 1
fi

if [ -z "$GITHUB_TOKEN" ]
then
  # shellcheck disable=SC2016
  echo 'Error: Generate a personal access token at https://github.com/settings/tokens and set it in the $GITHUB_TOKEN env var'
  exit 1
fi

linkerd2_pulls_url="https://api.github.com/repos/linkerd/linkerd2/pulls"
linkerd2_kind_integration_url="https://api.github.com/repos/linkerd/linkerd2/actions/workflows/kind_integration.yml"

# Get the URL for downloading the artifacts archive
auth="Authorization: token $GITHUB_TOKEN"
branch=$(curl -sL -H "$auth" "$linkerd2_pulls_url/$pr" | jq -r '.head.ref')
artifacts=$(curl -sL -H "$auth" "$linkerd2_kind_integration_url/runs?branch=$branch" | jq -r '.workflow_runs[0].artifacts_url')
archive=$(curl -sL -H "$auth" "$artifacts" | jq -r '.artifacts[0].archive_download_url')

bindir=$( cd "${BASH_SOURCE[0]%/*}" && pwd )
dir=$(mktemp -d -t "linkerd-pr-$pr.XXXXXXXXXX")

# Change directory temporarily and download artifact
cd "$dir"

curl -L -o archive.zip -H "$auth" "$archive"
unzip -o archive.zip

# Push the Linkerd CLI
image=$(docker load -i cli-bin.tar | sed 's/Loaded image: //')
docker push "$image"
tag=$(echo "$image" | cut -f 2 -d ":")

# Load images into local docker images
if [ $is_kind ]
then
  # Create new KinD cluster
  cluster_name="pr-$pr"
  context_flag=(--context kind-"$cluster_name")

  if "$bindir"/kind get clusters | grep "$cluster_name"
  then
    echo "Error: KinD cluster '$cluster_name' exists"
    exit 1
  fi
  
  "$bindir"/kind create cluster --name "$cluster_name"

  # Load images into cluster
  for image in cni-plugin controller debug grafana proxy web
  do
    echo "Loading $image image into cluster.."
    "$bindir"/kind load image-archive --name "$cluster_name" $image.tar || tee load_fail &
  done

  # Wait for `kind load` background processes to copmlete; exit early if any
  # job failed
  wait < <(jobs -p)
  if [ -f load_fail ]
  then
    echo "Loading docker images into KinD cluster failed."
    exit 1
  fi
else
  for image in cni-plugin controller debug grafana proxy web
  do
    docker load -i "$image.tar"
  done
fi

cd -
rm -rf "$dir"

case $(uname) in
  Darwin)
    platform="darwin"
    ;;
  Linux)
    platform="linux"
    ;;
  *)
    platform="windows"
    ;;
esac

# Install the Linkerd CLI
linkerd=$("$bindir"/docker-pull-binaries "$tag" | awk -v platform=$platform '$0 ~ platform')

# shellcheck disable=SC2068
"$linkerd" ${context_flag[@]} check --pre
# shellcheck disable=SC2068
"$linkerd" ${context_flag[@]} install | kubectl ${context_flag[@]} apply -f -
# shellcheck disable=SC2068
"$linkerd" ${context_flag[@]} check

echo ""
echo "Linkerd installed. CLI available:"
echo "$linkerd ${context_flag[*]}"
